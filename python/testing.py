import numpy as np

# Define the global stiffness matrix K
K = np.array([
    [10, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [-2, 2, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0, -2, 10,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [-1,  0,  0, 2, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0, -1,  0, -2, 10, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0, -1,  0, -2, 2,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0, -1,  0,  0, 10, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0, -1,  0, -2, 2, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0, -1,  0, -2, 10,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0, -1,  0,  0, 2, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0, -1,  0, -2, 10, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -2, 2,  0,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0, 10, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -2, 2, -2,  0, -1,  0,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -2, 10,  0,  0, -1,  0,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0, 2, -2,  0, -1,  0,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -2, 10, -2,  0, -1,  0,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0, -2, 2,  0,  0, -1,  0,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1,  0,  0, 10, -2,  0, -1,  0,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, 10, -2,  2, -2,  0, -1,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, 10, -2,  10, -2,  10,  0],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, 10, -2,  2, -2,  10],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, 10, -2,  10,  -2],
    [ 0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, -1, 10, -2,  10]
])
print(K.shape)
# Define the force matrix F
F = np.zeros((24, 6))
F[0, 0] = 1.0  # Load in x at node 1
F[1, 1] = 1.0  # Load in y at node 1
F[2, 2] = 1.0  # Load in z at node 1
F[0, 3] = 1.0  # Moment about x at node 1
F[1, 4] = 1.0  # Moment about y at node 1
F[2, 5] = 1.0  # Moment about z at node 1

F[6, 0] = 1.0  # Load in x at node 3
F[7, 1] = 1.0  # Load in y at node 3
F[8, 2] = 1.0  # Load in z at node 3
F[6, 3] = 1.0  # Moment about x at node 3
F[7, 4] = 1.0  # Moment about y at node 3
F[8, 5] = 1.0  # Moment about z at node 3

# Compute the deformation matrix U
U = np.linalg.inv(K) @ F
print("Nodal Displacements U:\n", U)

# Define the extraction matrix A
A = np.zeros((6, 24))
A[0, 0] = 1.0
A[1, 1] = 1.0
A[2, 2] = 1.0
A[3, 6] = 1.0
A[4, 7] = 1.0
A[5, 8] = 1.0

# Extract the compliance matrix
C_extracted = A @ U
print("Extracted Displacements for Nodes of Interest:\n", C_extracted)